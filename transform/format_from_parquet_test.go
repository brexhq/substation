package transform

import (
	"context"
	"slices"
	"testing"

	"github.com/brexhq/substation/v2/config"
	"github.com/brexhq/substation/v2/message"
)

var _ Transformer = &formatFromParquet{}

var formatFromParquetTests = []struct {
	name     string
	cfg      config.Config
	test     []byte
	expected []string
}{
	{
		"data",
		config.Config{},
		// This is a Parquet file containing two rows and two columns (Name, Age).
		[]byte{0x50, 0x41, 0x52, 0x31, 0x15, 0x04, 0x15, 0x20, 0x15, 0x24, 0x4c, 0x15, 0x04, 0x15, 0x00, 0x12, 0x00, 0x00, 0x10, 0x3c, 0x05, 0x00, 0x00, 0x00, 0x41, 0x6c, 0x69, 0x63, 0x65, 0x03, 0x00, 0x00, 0x00, 0x42, 0x6f, 0x62, 0x15, 0x00, 0x15, 0x06, 0x15, 0x0a, 0x2c, 0x15, 0x04, 0x15, 0x10, 0x15, 0x06, 0x15, 0x06, 0x1c, 0x36, 0x00, 0x28, 0x03, 0x42, 0x6f, 0x62, 0x18, 0x05, 0x41, 0x6c, 0x69, 0x63, 0x65, 0x00, 0x00, 0x00, 0x03, 0x08, 0x01, 0x03, 0x02, 0x15, 0x04, 0x15, 0x10, 0x15, 0x14, 0x4c, 0x15, 0x04, 0x15, 0x00, 0x12, 0x00, 0x00, 0x08, 0x1c, 0x1e, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x15, 0x00, 0x15, 0x06, 0x15, 0x0a, 0x2c, 0x15, 0x04, 0x15, 0x10, 0x15, 0x06, 0x15, 0x06, 0x1c, 0x18, 0x04, 0x1e, 0x00, 0x00, 0x00, 0x18, 0x04, 0x19, 0x00, 0x00, 0x00, 0x16, 0x00, 0x28, 0x04, 0x1e, 0x00, 0x00, 0x00, 0x18, 0x04, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x08, 0x01, 0x03, 0x02, 0x15, 0x04, 0x19, 0x3c, 0x35, 0x00, 0x18, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x15, 0x04, 0x00, 0x15, 0x0c, 0x25, 0x00, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x25, 0x00, 0x4c, 0x1c, 0x00, 0x00, 0x00, 0x15, 0x02, 0x25, 0x00, 0x18, 0x03, 0x61, 0x67, 0x65, 0x00, 0x16, 0x04, 0x19, 0x1c, 0x19, 0x2c, 0x26, 0x00, 0x1c, 0x15, 0x0c, 0x19, 0x35, 0x00, 0x06, 0x10, 0x19, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x15, 0x02, 0x16, 0x04, 0x16, 0x84, 0x01, 0x16, 0x8c, 0x01, 0x26, 0x48, 0x26, 0x08, 0x1c, 0x36, 0x00, 0x28, 0x03, 0x42, 0x6f, 0x62, 0x18, 0x05, 0x41, 0x6c, 0x69, 0x63, 0x65, 0x00, 0x19, 0x2c, 0x15, 0x04, 0x15, 0x00, 0x15, 0x02, 0x00, 0x15, 0x00, 0x15, 0x10, 0x15, 0x02, 0x00, 0x3c, 0x16, 0x10, 0x19, 0x06, 0x19, 0x06, 0x00, 0x00, 0x00, 0x26, 0x00, 0x1c, 0x15, 0x02, 0x19, 0x35, 0x00, 0x06, 0x10, 0x19, 0x18, 0x03, 0x61, 0x67, 0x65, 0x15, 0x02, 0x16, 0x04, 0x16, 0x8c, 0x01, 0x16, 0x94, 0x01, 0x26, 0xc4, 0x01, 0x26, 0x94, 0x01, 0x1c, 0x18, 0x04, 0x1e, 0x00, 0x00, 0x00, 0x18, 0x04, 0x19, 0x00, 0x00, 0x00, 0x16, 0x00, 0x28, 0x04, 0x1e, 0x00, 0x00, 0x00, 0x18, 0x04, 0x19, 0x00, 0x00, 0x00, 0x00, 0x19, 0x2c, 0x15, 0x04, 0x15, 0x00, 0x15, 0x02, 0x00, 0x15, 0x00, 0x15, 0x10, 0x15, 0x02, 0x00, 0x00, 0x00, 0x16, 0x90, 0x02, 0x16, 0x04, 0x26, 0x08, 0x16, 0xa0, 0x02, 0x00, 0x19, 0x2c, 0x18, 0x06, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x73, 0x18, 0xde, 0x02, 0x7b, 0x22, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x5d, 0x2c, 0x20, 0x22, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x5d, 0x2c, 0x20, 0x22, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x6e, 0x75, 0x6d, 0x70, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x7d, 0x2c, 0x20, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x67, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x67, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x22, 0x2c, 0x20, 0x22, 0x6e, 0x75, 0x6d, 0x70, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x7d, 0x5d, 0x2c, 0x20, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x70, 0x79, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x22, 0x2c, 0x20, 0x22, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x20, 0x22, 0x32, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x22, 0x7d, 0x2c, 0x20, 0x22, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x20, 0x22, 0x32, 0x2e, 0x33, 0x2e, 0x30, 0x22, 0x7d, 0x00, 0x18, 0x0c, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x3a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x8c, 0x06, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x30, 0x41, 0x43, 0x41, 0x41, 0x41, 0x51, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x4b, 0x41, 0x41, 0x34, 0x41, 0x42, 0x67, 0x41, 0x46, 0x41, 0x41, 0x67, 0x41, 0x43, 0x67, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x41, 0x41, 0x51, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x4b, 0x41, 0x41, 0x77, 0x41, 0x41, 0x41, 0x41, 0x45, 0x41, 0x41, 0x67, 0x41, 0x43, 0x67, 0x41, 0x41, 0x41, 0x4a, 0x51, 0x42, 0x41, 0x41, 0x41, 0x45, 0x41, 0x41, 0x41, 0x41, 0x41, 0x51, 0x41, 0x41, 0x41, 0x41, 0x77, 0x41, 0x41, 0x41, 0x41, 0x49, 0x41, 0x41, 0x77, 0x41, 0x42, 0x41, 0x41, 0x49, 0x41, 0x41, 0x67, 0x41, 0x41, 0x41, 0x42, 0x73, 0x41, 0x51, 0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x46, 0x34, 0x42, 0x41, 0x41, 0x42, 0x37, 0x49, 0x6d, 0x6c, 0x75, 0x5a, 0x47, 0x56, 0x34, 0x58, 0x32, 0x4e, 0x76, 0x62, 0x48, 0x56, 0x74, 0x62, 0x6e, 0x4d, 0x69, 0x4f, 0x69, 0x42, 0x62, 0x58, 0x53, 0x77, 0x67, 0x49, 0x6d, 0x4e, 0x76, 0x62, 0x48, 0x56, 0x74, 0x62, 0x6c, 0x39, 0x70, 0x62, 0x6d, 0x52, 0x6c, 0x65, 0x47, 0x56, 0x7a, 0x49, 0x6a, 0x6f, 0x67, 0x57, 0x31, 0x30, 0x73, 0x49, 0x43, 0x4a, 0x6a, 0x62, 0x32, 0x78, 0x31, 0x62, 0x57, 0x35, 0x7a, 0x49, 0x6a, 0x6f, 0x67, 0x57, 0x33, 0x73, 0x69, 0x62, 0x6d, 0x46, 0x74, 0x5a, 0x53, 0x49, 0x36, 0x49, 0x43, 0x4a, 0x75, 0x59, 0x57, 0x31, 0x6c, 0x49, 0x69, 0x77, 0x67, 0x49, 0x6d, 0x5a, 0x70, 0x5a, 0x57, 0x78, 0x6b, 0x58, 0x32, 0x35, 0x68, 0x62, 0x57, 0x55, 0x69, 0x4f, 0x69, 0x41, 0x69, 0x62, 0x6d, 0x46, 0x74, 0x5a, 0x53, 0x49, 0x73, 0x49, 0x43, 0x4a, 0x77, 0x59, 0x57, 0x35, 0x6b, 0x59, 0x58, 0x4e, 0x66, 0x64, 0x48, 0x6c, 0x77, 0x5a, 0x53, 0x49, 0x36, 0x49, 0x43, 0x4a, 0x31, 0x62, 0x6d, 0x6c, 0x6a, 0x62, 0x32, 0x52, 0x6c, 0x49, 0x69, 0x77, 0x67, 0x49, 0x6d, 0x35, 0x31, 0x62, 0x58, 0x42, 0x35, 0x58, 0x33, 0x52, 0x35, 0x63, 0x47, 0x55, 0x69, 0x4f, 0x69, 0x41, 0x69, 0x62, 0x32, 0x4a, 0x71, 0x5a, 0x57, 0x4e, 0x30, 0x49, 0x69, 0x77, 0x67, 0x49, 0x6d, 0x31, 0x6c, 0x64, 0x47, 0x46, 0x6b, 0x59, 0x58, 0x52, 0x68, 0x49, 0x6a, 0x6f, 0x67, 0x62, 0x6e, 0x56, 0x73, 0x62, 0x48, 0x30, 0x73, 0x49, 0x48, 0x73, 0x69, 0x62, 0x6d, 0x46, 0x74, 0x5a, 0x53, 0x49, 0x36, 0x49, 0x43, 0x4a, 0x68, 0x5a, 0x32, 0x55, 0x69, 0x4c, 0x43, 0x41, 0x69, 0x5a, 0x6d, 0x6c, 0x6c, 0x62, 0x47, 0x52, 0x66, 0x62, 0x6d, 0x46, 0x74, 0x5a, 0x53, 0x49, 0x36, 0x49, 0x43, 0x4a, 0x68, 0x5a, 0x32, 0x55, 0x69, 0x4c, 0x43, 0x41, 0x69, 0x63, 0x47, 0x46, 0x75, 0x5a, 0x47, 0x46, 0x7a, 0x58, 0x33, 0x52, 0x35, 0x63, 0x47, 0x55, 0x69, 0x4f, 0x69, 0x41, 0x69, 0x61, 0x57, 0x35, 0x30, 0x4d, 0x7a, 0x49, 0x69, 0x4c, 0x43, 0x41, 0x69, 0x62, 0x6e, 0x56, 0x74, 0x63, 0x48, 0x6c, 0x66, 0x64, 0x48, 0x6c, 0x77, 0x5a, 0x53, 0x49, 0x36, 0x49, 0x43, 0x4a, 0x70, 0x62, 0x6e, 0x51, 0x32, 0x4e, 0x43, 0x49, 0x73, 0x49, 0x43, 0x4a, 0x74, 0x5a, 0x58, 0x52, 0x68, 0x5a, 0x47, 0x46, 0x30, 0x59, 0x53, 0x49, 0x36, 0x49, 0x47, 0x35, 0x31, 0x62, 0x47, 0x78, 0x39, 0x58, 0x53, 0x77, 0x67, 0x49, 0x6d, 0x4e, 0x79, 0x5a, 0x57, 0x46, 0x30, 0x62, 0x33, 0x49, 0x69, 0x4f, 0x69, 0x42, 0x37, 0x49, 0x6d, 0x78, 0x70, 0x59, 0x6e, 0x4a, 0x68, 0x63, 0x6e, 0x6b, 0x69, 0x4f, 0x69, 0x41, 0x69, 0x63, 0x48, 0x6c, 0x68, 0x63, 0x6e, 0x4a, 0x76, 0x64, 0x79, 0x49, 0x73, 0x49, 0x43, 0x4a, 0x32, 0x5a, 0x58, 0x4a, 0x7a, 0x61, 0x57, 0x39, 0x75, 0x49, 0x6a, 0x6f, 0x67, 0x49, 0x6a, 0x49, 0x77, 0x4c, 0x6a, 0x41, 0x75, 0x4d, 0x43, 0x4a, 0x39, 0x4c, 0x43, 0x41, 0x69, 0x63, 0x47, 0x46, 0x75, 0x5a, 0x47, 0x46, 0x7a, 0x58, 0x33, 0x5a, 0x6c, 0x63, 0x6e, 0x4e, 0x70, 0x62, 0x32, 0x34, 0x69, 0x4f, 0x69, 0x41, 0x69, 0x4d, 0x69, 0x34, 0x7a, 0x4c, 0x6a, 0x41, 0x69, 0x66, 0x51, 0x41, 0x41, 0x42, 0x67, 0x41, 0x41, 0x41, 0x48, 0x42, 0x68, 0x62, 0x6d, 0x52, 0x68, 0x63, 0x77, 0x41, 0x41, 0x41, 0x67, 0x41, 0x41, 0x41, 0x45, 0x77, 0x41, 0x41, 0x41, 0x41, 0x45, 0x41, 0x41, 0x41, 0x41, 0x7a, 0x50, 0x2f, 0x2f, 0x2f, 0x77, 0x41, 0x41, 0x41, 0x41, 0x49, 0x51, 0x41, 0x41, 0x41, 0x41, 0x48, 0x41, 0x41, 0x41, 0x41, 0x41, 0x51, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x77, 0x41, 0x41, 0x41, 0x47, 0x46, 0x6e, 0x5a, 0x51, 0x41, 0x49, 0x41, 0x41, 0x77, 0x41, 0x43, 0x41, 0x41, 0x48, 0x41, 0x41, 0x67, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x49, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x46, 0x41, 0x41, 0x49, 0x41, 0x41, 0x41, 0x41, 0x42, 0x77, 0x41, 0x4d, 0x41, 0x41, 0x41, 0x41, 0x45, 0x41, 0x41, 0x51, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x52, 0x41, 0x41, 0x41, 0x41, 0x41, 0x63, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x45, 0x41, 0x41, 0x41, 0x41, 0x62, 0x6d, 0x46, 0x74, 0x5a, 0x51, 0x41, 0x41, 0x41, 0x41, 0x41, 0x45, 0x41, 0x41, 0x51, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3d, 0x00, 0x18, 0x20, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x2d, 0x63, 0x70, 0x70, 0x2d, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x32, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x19, 0x2c, 0x1c, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x89, 0x05, 0x00, 0x00, 0x50, 0x41, 0x52, 0x31},
		[]string{
			`{"age":30,"name":"Alice"}`,
			`{"age":25,"name":"Bob"}`,
		},
	},
}

func TestFormatFromParquet(t *testing.T) {
	ctx := context.TODO()
	for _, test := range formatFromParquetTests {
		t.Run(test.name, func(t *testing.T) {
			msg := message.New().SetData(test.test)

			tf, err := newFormatFromParquet(ctx, test.cfg)
			if err != nil {
				t.Fatal(err)
			}

			msgs, err := tf.Transform(ctx, msg)
			if err != nil {
				t.Error(err)
			}

			// The order of the output is not guaranteed, so we need to
			// check that the expected values are present anywhere in the
			// result.
			var results []string
			for _, m := range msgs {
				results = append(results, string(m.Data()))
			}

			for _, r := range results {
				if !slices.Contains(test.expected, r) {
					t.Errorf("expected %s, got %s", test.expected, r)
				}
			}
		})
	}
}

func benchmarkFormatFromParquet(b *testing.B, tf *formatFromParquet, data []byte) {
	ctx := context.TODO()
	for i := 0; i < b.N; i++ {
		msg := message.New().SetData(data)
		_, _ = tf.Transform(ctx, msg)
	}
}

func BenchmarkFormatFromParquet(b *testing.B) {
	for _, test := range formatFromParquetTests {
		tf, err := newFormatFromParquet(context.TODO(), test.cfg)
		if err != nil {
			b.Fatal(err)
		}

		b.Run(test.name,
			func(b *testing.B) {
				benchmarkFormatFromParquet(b, tf, test.test)
			},
		)
	}
}

func FuzzTestFormatFromParquet(f *testing.F) {
	testcases := [][]byte{
		{80, 75, 3, 4, 10, 0, 0, 0, 0, 0, 57, 63, 251, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 28, 0, 116, 109, 112, 47, 85, 84, 9, 0, 3, 238, 10, 165, 102, 239, 10, 165, 102, 117, 120, 11, 0, 1, 4, 246, 1, 0, 0, 4, 20, 0, 0, 0, 80, 75, 3, 4, 10, 0, 0, 0, 0, 0, 55, 63, 251, 88, 200, 175, 228, 166, 3, 0, 0, 0, 3, 0, 0, 0, 11, 0, 28, 0, 116, 109, 112, 47, 98, 97, 122, 46, 116, 120, 116, 85, 84, 9, 0, 3, 233, 10, 165, 102, 234, 10, 165, 102, 117, 120, 11, 0, 1, 4, 246, 1, 0, 0, 4, 20, 0, 0, 0, 113, 117, 120},
		{80, 75, 3, 4, 10, 0, 0, 0, 0, 0, 44, 63, 251, 88, 170, 140, 255, 118, 3, 0, 0, 0, 3, 0, 0, 0, 11, 0, 28, 0, 116, 109, 112, 47, 102, 111, 111, 46, 116, 120, 116, 85, 84, 9, 0, 3, 212, 10, 165, 102, 214, 10, 165, 102, 117, 120, 11, 0, 1, 4, 246, 1, 0, 0, 4, 20, 0, 0, 0, 98, 97, 114},
		{},
	}

	for _, tc := range testcases {
		f.Add(tc)
	}

	f.Fuzz(func(t *testing.T, data []byte) {
		ctx := context.TODO()
		msg := message.New().SetData(data)

		tf, err := newFormatFromParquet(ctx, config.Config{})
		if err != nil {
			return
		}

		_, err = tf.Transform(ctx, msg)
		if err != nil {
			return
		}
	})
}
