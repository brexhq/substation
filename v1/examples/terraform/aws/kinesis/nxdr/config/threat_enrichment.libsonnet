// The nXDR pattern relies on Substation's meta_switch transform to conditionally determine
// if an event matches threat criteria. If the event matches, then a threat signal is created.
// The meta_switch transform supports any combination of if-elif-else logic.
local sub = import '../../../../../../build/config/substation.libsonnet';
local const = import 'const.libsonnet';

// Composable conditions are recommended when managing multiple threat signals.
local cnd = {
  process: [
    sub.cnd.str.eq({ obj: { src: 'event.category' }, value: 'process' }),
  ],

  macos: {
    os: sub.cnd.str.eq({ obj: { src: 'host.os.type' }, value: 'macos' }),
    process: $.process + [$.macos.os],
  },
};

{
  transforms: [
    // Privilege Escalation
    // https://attack.mitre.org/tactics/TA0004/
    //
    // https://attack.mitre.org/techniques/T1548/004/
    sub.tf.meta.switch({
      local name = 'privilege_escalation_elevated_execution_with_prompt',

      cases: [
        {
          transform: const.threat_signal({
            name: name,
            description: 'Identifies when an authentication prompt is generated by the AuthorizationExecuteWithPrivileges API.',
            references: ['https://objective-see.com/blog/blog_0x2A.html'],
            // The risk score can be dynamically calculated based on additional
            // fields in the event.
            risk_score: 73,
          }),
          condition: sub.cnd.all(cnd.macos.process + [
            sub.cnd.str.eq({ obj: { src: 'process.name' }, value: 'security_authtrampoline' }),
          ]),
        },
      ],
    }),
  ],
}
