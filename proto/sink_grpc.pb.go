// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/sink.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SinkClient is the client API for Sink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SinkClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (Sink_SendClient, error)
}

type sinkClient struct {
	cc grpc.ClientConnInterface
}

func NewSinkClient(cc grpc.ClientConnInterface) SinkClient {
	return &sinkClient{cc}
}

func (c *sinkClient) Send(ctx context.Context, opts ...grpc.CallOption) (Sink_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sink_ServiceDesc.Streams[0], "/substation.proto.Sink/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &sinkSendClient{stream}
	return x, nil
}

type Sink_SendClient interface {
	Send(*Capsule) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type sinkSendClient struct {
	grpc.ClientStream
}

func (x *sinkSendClient) Send(m *Capsule) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sinkSendClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SinkServer is the server API for Sink service.
// All implementations must embed UnimplementedSinkServer
// for forward compatibility
type SinkServer interface {
	Send(Sink_SendServer) error
	mustEmbedUnimplementedSinkServer()
}

// UnimplementedSinkServer must be embedded to have forward compatible implementations.
type UnimplementedSinkServer struct {
}

func (UnimplementedSinkServer) Send(Sink_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedSinkServer) mustEmbedUnimplementedSinkServer() {}

// UnsafeSinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SinkServer will
// result in compilation errors.
type UnsafeSinkServer interface {
	mustEmbedUnimplementedSinkServer()
}

func RegisterSinkServer(s grpc.ServiceRegistrar, srv SinkServer) {
	s.RegisterService(&Sink_ServiceDesc, srv)
}

func _Sink_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SinkServer).Send(&sinkSendServer{stream})
}

type Sink_SendServer interface {
	SendAndClose(*Ack) error
	Recv() (*Capsule, error)
	grpc.ServerStream
}

type sinkSendServer struct {
	grpc.ServerStream
}

func (x *sinkSendServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sinkSendServer) Recv() (*Capsule, error) {
	m := new(Capsule)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Sink_ServiceDesc is the grpc.ServiceDesc for Sink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "substation.proto.Sink",
	HandlerType: (*SinkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Sink_Send_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/sink.proto",
}
